"use strict";
require('dotenv').config();
console.log(process.env.DB_NAME);
const mysql = require("mysql2/promise");

function displayWarningMessage(warning) {
  switch (warning.Code) {
    case 1007:
      console.log(`Skipping Database Creation --> ${warning.Message}`);
      break;
    case 1050:
      console.log(`Skipping Table Creation --> ${warning.Message}`);
      break;
  }
}

async function getConnection() {
  return await mysql.createConnection({
    host: process.env.DB_HOST,
    //TODO make sure to change to the user you want to use
    user: process.env.DB_USER, //Your DB username
    //TODO make sure to change to the correct password for your user.
    password: process.env.DB_PASSWORD, //Your DB password
  });
}

async function makeDatabase(connection) {
  //TODO make sure to change yourdbnamehere
  const [result, _] = await connection.query(
    `CREATE DATABASE IF NOT EXISTS ${process.env.DB_USER};`
  );
  if (result && result.warningStatus > 0) {
    const [warningResult, _] = await connection.query("SHOW WARNINGS");
    displayWarningMessage(warningResult[0]);
  } else {
    console.log("Created Database!");
  }
}

async function makeUsersTable(connection) {
  const [result, _] = await connection.query(
    // Users Table SQL Goes here
    `
    CREATE TABLE IF NOT EXISTS ${process.env.DB_USER}.users (
      id INT UNSIGNED NOT NULL AUTO_INCREMENT,
      username VARCHAR(64) NOT NULL,
      email VARCHAR(128) NOT NULL,
      password VARCHAR(128) NOT NULL,
      created_at TIMESTAMP NOT NULL DEFAULT current_timestamp,
      updated_at TIMESTAMP NOT NULL DEFAULT current_timestamp,
      PRIMARY KEY (id),
      UNIQUE INDEX id_UNIQUE (id ASC) VISIBLE,
      UNIQUE INDEX username_UNIQUE (username ASC) VISIBLE,
      UNIQUE INDEX email_UNIQUE (email ASC) VISIBLE)
    ENGINE = InnoDB
    `
  );

  if (result && result.warningStatus > 0) {
    const [warningResult, _] = await connection.query("SHOW WARNINGS");
    displayWarningMessage(warningResult[0]);
  } else {
    console.log("Created Users Table!");
  }
}

async function makePostsTable(connection) {
  const [result, _] = await connection.query(
    // Posts Table SQL Goes here
    `
    CREATE TABLE IF NOT EXISTS ${process.env.DB_USER}.posts (
      id INT UNSIGNED NOT NULL AUTO_INCREMENT,
      title TEXT NOT NULL,
      description TEXT NOT NULL,
      video VARCHAR(4096) NOT NULL,
      thumbnail VARCHAR(4096) NOT NULL,
      created_at TIMESTAMP NOT NULL DEFAULT current_timestamp,
      fk_user_id INT UNSIGNED NOT NULL,
      PRIMARY KEY (id),
      UNIQUE INDEX id_UNIQUE (id ASC) VISIBLE,
      INDEX fk_to_users_table_idx (fk_user_id ASC) VISIBLE,
      CONSTRAINT fk_to_users_table
        FOREIGN KEY (fk_user_id)
        REFERENCES ${process.env.DB_USER}.users (id)
        ON DELETE NO ACTION
        ON UPDATE CASCADE)
    ENGINE = InnoDB
    `
  );
  if (result && result.warningStatus > 0) {
    const [warningResult, _] = await connection.query("SHOW WARNINGS");
    displayWarningMessage(warningResult[0]);
  } else {
    console.log("Created Posts Table!");
  }
}

async function makeCommentsTable(connection) {
  const [result, _] = await connection.query(
    // Comments Table SQL Goes here
    ` 
    CREATE TABLE IF NOT EXISTS ${process.env.DB_USER}.comments (
      id INT UNSIGNED NOT NULL AUTO_INCREMENT,
      text TEXT NOT NULL,
      fk_post_id INT UNSIGNED NOT NULL,
      fk_user_id INT UNSIGNED NOT NULL,
      created_at TIMESTAMP NOT NULL DEFAULT current_timestamp,
      PRIMARY KEY (id),
      UNIQUE INDEX id_UNIQUE (id ASC) VISIBLE,
      INDEX comments_author_idx (fk_user_id ASC) VISIBLE,
      INDEX comment_post_owner_idx (fk_post_id ASC) VISIBLE,
      CONSTRAINT comment_author
        FOREIGN KEY (fk_user_id)
        REFERENCES ${process.env.DB_USER}.users (id)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
      CONSTRAINT comment_post_owner
        FOREIGN KEY (fk_post_id)
        REFERENCES ${process.env.DB_USER}.posts (id)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB
    `
  );
  if (result && result.warningStatus > 0) {
    const [warningResult, _] = await connection.query("SHOW WARNINGS");
    displayWarningMessage(warningResult[0]);
  } else {
    console.log("Created Comments Table!");
  }
}

async function makeLikesTable(connection) {
  const [result, _] = await connection.query(
    // Likes Table SQL Goes here
    ` 
    CREATE TABLE IF NOT EXISTS ${process.env.DB_USER}.likes (
      id INT UNSIGNED NOT NULL AUTO_INCREMENT,
      fk_post_id INT UNSIGNED NOT NULL,
      fk_user_id INT UNSIGNED NOT NULL,
      created_at TIMESTAMP NOT NULL DEFAULT current_timestamp,
      PRIMARY KEY (id),
      UNIQUE INDEX id_UNIQUE (id ASC) VISIBLE,
      INDEX like_author_idx (fk_user_id ASC) VISIBLE,
      INDEX liked_post_idx (fk_post_id ASC) VISIBLE,
      CONSTRAINT like_author
        FOREIGN KEY (fk_user_id)
        REFERENCES ${process.env.DB_USER}.users (id)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
      CONSTRAINT liked_post
        FOREIGN KEY (fk_post_id)
        REFERENCES ${process.env.DB_USER}.posts (id)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB
    `
  );
  if (result && result.warningStatus > 0) {
    const [warningResult, _] = await connection.query("SHOW WARNINGS");
    displayWarningMessage(warningResult[0]);
  } else {
    console.log("Created Likes Table!");
  }
}

(async function main() {
  let connection = null;
  try {
    connection = await getConnection();
    await makeDatabase(connection); // make DB
    //TODO make sure to change yourdbnamehere
    await connection.query("USE ${process.env.DB_USER}"); // set new DB to the current DB
    await makeUsersTable(connection); // try to make user table
    await makePostsTable(connection); // try to make posts table
    await makeCommentsTable(connection); // try to make comments table
    await makeLikesTable(connection); // try to make likes table
    connection.close();
    return;
  } catch (error) {
    console.error(error);
    if (connection != null) {
      connection.close();
    }
  }
})();
